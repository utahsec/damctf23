# chal metadata
name: blazing-ot
author: Lance Roy
description: |-
  I'm implementing a secure 2-party computation protocol, using garbled circuits. The first step is to
  obliviously transfer the inputs, right? I implemented the blazing fast OT protocol, but I haven't
  done the rest yet.

  `nc {{ host }} {{ port }}`

# these are files that are given to the player. if you need things from the container (i.e. compiled binary, libc),
# push the challenge branch and download the artifacts from the CI/CD job
# if no files are provided, delete this block
provide:
- ./src/chal.py

# this should usually be the flag file so that it doesn't get out of sync if you change it
flag:
  file: ./flag

# visible controls rCTF status, deployed controls k8s status. THESE SHOULD ALWAYS BE THE SAME
visible: true
deployed: true

# specify the containers to be built
# replicas should be 2 unless resource intensive (>2) or stateful (1)
# make sure to update the port for what you are exposing in the Dockerfile
containers:
  main:
    build: .
    replicas: 2
    ports:
    - 31337
    resources:
      limits:
        cpu: 500m
        memory: 150Mi
      requests:
        cpu: 300m
        memory: 30Mi

# make sure to only expose the target container (i.e. http but not mysql)
expose:
  main:
  - target: 31337 # this is the container's EXPOSE port
    # @AUTHOR PICK ONE OF THE BELOW, NOT BOTH
    tcp: 30124  # raw NodePort that is exposed publicly (use this for nc chals). must be unique and within 30000-32767
